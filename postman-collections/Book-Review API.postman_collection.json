{
	"info": {
		"_postman_id": "60ca135b-383b-415d-bc0d-8f318aa416e2",
		"name": "Book-Review API",
		"description": "Complete API collection for Book Review Application\n\n**Prerequisites:**\n1. Set `base_url` in environment variables\n2. Run Signup/Login first to get auth_token",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24364735"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Signup (User)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@example.com\",\n  \"password\": \"user1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/signup",
						"description": "Register a new regular user"
					},
					"response": []
				},
				{
					"name": "Signup (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-admin-secret",
								"value": "YOUR_ADMIN_SECRET",
								"description": "Only if you implemented admin creation protection"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin1234\",\n  \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/signup",
						"description": "Register a new admin user (requires special permissions)"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token\", jsonData.token);",
									"pm.environment.set(\"user_id\", jsonData.user.id);",
									"",
									"// Store user role if needed",
									"if (jsonData.user.role) {",
									"    pm.environment.set(\"user_role\", jsonData.user.role);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login",
						"description": "Login and save token to environment variables"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": "{{base_url}}/auth/me",
						"description": "Get details of currently authenticated user"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": "{{base_url}}/auth/logout",
						"description": "Invalidate the current session"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints"
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Create Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Book created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('_id');",
									"    pm.collectionVariables.set(\"book_id\", jsonData.data._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"genre\": \"Classic\",\n  \"publishedYear\": 1925,\n  \"description\": \"A story of wealth, love, and the American Dream\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/api/books",
						"description": "Create a new book (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get All Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books?page=1&limit=10&genre=Classic",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "genre",
									"value": "Classic"
								}
							]
						},
						"description": "Get paginated list of books with optional filters"
					},
					"response": []
				},
				{
					"name": "Search Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/search?q=gatsby&page=1&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "gatsby"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "Search books by title or author (case-insensitive)"
					},
					"response": []
				},
				{
					"name": "Get Book Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/api/books/{{book_id}}",
						"description": "Get book details including reviews and average rating"
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": "{{base_url}}/api/books/{{book_id}}",
						"description": "Delete a book and all its reviews (admin only)"
					},
					"response": []
				}
			],
			"description": "Book management endpoints"
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Add Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Review added successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('_id');",
									"    pm.collectionVariables.set(\"review_id\", jsonData.data._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"rating\": 5,\n  \"reviewText\": \"One of the greatest American novels ever written\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/api/books/{{book_id}}/reviews",
						"description": "Add a review to a book (one review per user per book)"
					},
					"response": []
				},
				{
					"name": "Update Review",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"rating\": 4,\n  \"reviewText\": \"Excellent book but the ending was disappointing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/api/reviews/{{review_id}}",
						"description": "Update your own review"
					},
					"response": []
				},
				{
					"name": "Delete Review",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": "{{base_url}}/api/reviews/{{review_id}}",
						"description": "Delete your own review"
					},
					"response": []
				},
				{
					"name": "Get My Reviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reviews/me?page=1&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reviews",
								"me"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "Get paginated list of current user's reviews"
					},
					"response": []
				}
			],
			"description": "Book review endpoints"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{auth_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Set environment variables if needed before requests run",
					""
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Global tests that run after every request",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:7777",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "review_id",
			"value": "",
			"type": "string"
		}
	]
}